I"ï!<p><img src="/uploads/erporydxmaarwcd.png" alt="" /></p>
<cap>Thank you Tyler Hobbs for the inspiration</cap>

<p>I recently found this piece of art (LINES 2A (2017)) created by <a href="https://twitter.com/tylerxhobbs">Tyler Hobbs</a>. This picture kinda looked very hand drawn, but it‚Äôs completely generative. Something about this drawing and it‚Äôs texture kind of resonated with me, so I wanted to try to study and replicate (or make something inspired by this work) using p5js.</p>

<p>I started out by plotting a bunch of random points within a circle like so.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>w = 1000
function setup() {
  createCanvas(w, w);
  background('#F9F8F4');
}

function draw() {
  x = random(w)
  y = random(w)
  if (pow(w/2 - x, 2) + pow(w/2 - y, 2) &lt; 7e4) {
    point(x,y)
  }
}
</code></pre></div></div>

<p><img src="/uploads/download-25.png" alt="" /></p>

<p>This is a painfully slow process to generate random points in a circle. I found a better way to do this later. What I wanted to do next was to generate flow fields, but restricted to the circular region.</p>

<p>It‚Äôs super easy to generate flow field patterns using perlin noise.</p>

<ol>
  <li>Choose a random point <code class="highlighter-rouge">&lt;x,y&gt;</code></li>
  <li>Plot <code class="highlighter-rouge">&lt;x,y&gt;</code></li>
  <li>Calculate <code class="highlighter-rouge">n = noise(x,y)</code></li>
  <li>Do <code class="highlighter-rouge">x+=cos(n * 2 * PI)</code> and <code class="highlighter-rouge">y+=sin(n * 2 * PI)</code></li>
  <li>Repeat 2.</li>
</ol>

<p>We‚Äôre going to plot flow fields inside the circle. Let‚Äôs try this.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const is_in_circle = (x, y) =&gt; 
  (pow(w / 2 - x, 2) + pow(w / 2 - y, 2) &lt; 7e4)

function draw() {
  if (is_in_circle(x = random(w), y = random(w)))
    while (is_in_circle(x, y)) {
      n = noise(x, y)
      x += sin(n * TAU)
      y += cos(n * TAU)
      point(x, y)
    }
}
</code></pre></div></div>

<p><img src="/uploads/download-28.png" alt="" /></p>

<p>OK, not very good. The noise at this level is pretty rough. we‚Äôre going to zoom in to the noise function (by dividing the <code class="highlighter-rouge">x,y</code> inputs by some constant value) and probably use <code class="highlighter-rouge">circle(x ,y ,0.3)</code> to plot points instead if point function, because I feel it looks way smoother. Also, I‚Äôm adding a <code class="highlighter-rouge">random() &gt; 0.01</code> condition in the loop so that we also get short lines that are not trimmed away by the edge of the circle.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function draw() {
  if (is_in_circle(x = random(w), y = random(w)))
    while (is_in_circle(x, y) &amp;&amp; random() &gt; 0.01) {
      n = noise(x / 500, y / 500)
      x += sin(n * TAU)
      y += cos(n * TAU)
      circle(x, y, .3)
    }
}
</code></pre></div></div>

<p><img src="/uploads/download-27.png" alt="" /></p>

<p>Actually.. not bad. I think we manage almost replicate the original texture. The inverted version also looks pretty good.</p>

<p><img src="/uploads/download-19.png" alt="" /></p>

<p><img src="/uploads/ppanets.png" alt="" /></p>

<p>I went ahead and made a „Å§„Å∂„ÇÑ„ÅçProcessing version of this.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">function setup(){createCanvas(w=1e3,w),background("<a href="https://twitter.com/hashtag/%E3%81%A4%E3%81%B6%E3%82%84%E3%81%8DProcessing?src=hash&amp;ref_src=twsrc%5Etfw">#„Å§„Å∂„ÇÑ„ÅçProcessing</a>")}function draw(){if(g(x=random(w),y=random(w)))for(;g(x,y)&amp;&amp;random()&gt;.01;)n=noise(x/500,y/500),x+=sin(n_TAU),y+=cos(n_TAU),circle(x,y,.3)}g=((n,o)=&gt;pow(w/2-n,2)+pow(w/2-o,2)&lt;w*w/16); <a href="https://t.co/iVZTMtCn3i">pic.twitter.com/iVZTMtCn3i</a></p>‚Äî yakinavault (@yakinavault) <a href="https://twitter.com/yakinavault/status/1347903013042622467?ref_src=twsrc%5Etfw">January 9, 2021</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="going-further-animations">Going Further: Animations</h2>

<p>The code we wrote right now technically is animated. The animation however is not very smooth.</p>

<video loop="" autoplay="" muted=""> <source src="https://avinayak.github.io/uploads/simplescreenrecorder-2021-01-10_03-52-31.mp4" type="video/mp4" /> </video>

<p>To make smooth animations, we need to generate new points in the circle, keep track of these points outside the <code class="highlighter-rouge">draw()</code> function. I found this neat <a href="https://stackoverflow.com/a/50746409">technique</a>, to find random points in a circle where a random radius <code class="highlighter-rouge">r</code> and angle <code class="highlighter-rouge">theta</code> are chosen and the <code class="highlighter-rouge">x,y</code> points are obtained as <code class="highlighter-rouge">x = centerX + r * cos(theta)</code> and <code class="highlighter-rouge">y = centerY + r * sin(theta)</code></p>

<p>Let‚Äôs try that first.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function random_point() {
  r = random(w / 4)
  t = random(TAU)
  return [
    w/2 + cos(t) * r, 
    w/2 + sin(t) * r
  ]
}

function setup() {
  createCanvas((w = 1e3), w);
  background(255)
  k = w / 2
  m = (Array(w).fill(0)).map(random_point)
}

function draw() {
  for (i = k; --i;) {
    [x, y] = m[i]
    circle(x, y, .3);
  }
}
</code></pre></div></div>

<p><img src="/uploads/screenshot-from-2021-01-10-04-51-20.png" alt="" /></p>

<p>and now we apply flow fields and try to move these points.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function random_point() {
  r = random(w / 4)
  t = random(TAU)
  return [
    w/2 + cos(t) * r, 
    w/2 + sin(t) * r
  ]
}

const w = 1000
function setup() {
  createCanvas(w, w);
  background('#F9F8F4')
  k = w / 2
  points = (Array(k).fill(0)).map(random_point)
}

function draw() {
  for (i = k; --i;) {
    [x, y] = m[i]
    x += sin(n = noise(x / 400, y / 400) * TAU) * h
    y += cos(n) * h
    stroke(i%255)
    circle(x, y,.3)
    if (pow(k - x, 2) + pow(k - y, 2) &lt; 7e4)  // if point is in circle
      points[i] = [x, y, t]
    else points[i] = random_point() // replace with new point if not
  }
}
</code></pre></div></div>

<video loop="" autoplay="" muted=""> <source src="/uploads/simplescreenrecorder-2021-01-10_04-56-11.mp4" type="video/mp4" /> </video>

<p>And a „Å§„Å∂„ÇÑ„ÅçProcessing version of course..</p>

<blockquote class="twitter-tweet"><p lang="cy" dir="ltr">t=0,p=i=&gt;\[k+(r=random(w/4))_cos(t+=.1),k+r_sin(t)\],setup=i=&gt;{createCanvas(w=1e3,w),m=Array(k=w/2).fill(0).map(p)},draw=r=&gt;{for(i=k;--i;)\[x,y\]=m\[i\],x+=sin(n=noise(x/k,y/k)_TAU),y+=cos(n),stroke(i%4_85),point(x,y),k_w+x_x+y_y-w_(x+y)&lt;7e4?m\[i\]=\[x,y\]:m\[i\]=p()};//<a href="https://twitter.com/hashtag/%E3%81%A4%E3%81%B6%E3%82%84%E3%81%8DProcessing?src=hash&amp;ref_src=twsrc%5Etfw">#„Å§„Å∂„ÇÑ„ÅçProcessing</a> <a href="https://t.co/xVhCBNUltL">pic.twitter.com/xVhCBNUltL</a></p>‚Äî yakinavault (@yakinavault) <a href="https://twitter.com/yakinavault/status/1347930637227855874?ref_src=twsrc%5Etfw">January 9, 2021</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="adding-colors">Adding Colors</h2>

<p>There are many strategies to colorizing this sketch. One is by just giving each particle a random initial color.</p>

<p><img src="/uploads/download-21.png" alt="" /></p>

<p>However, I found that maintaining the initial x or y position in the particle array and using that to derive the hue information gives us some nice Jupiter/gaseous planet vibes.</p>

<video loop="" autoplay="" muted=""> <source src="https://avinayak.github.io/uploads/simplescreenrecorder-2021-01-10_05-18-19.mp4" type="video/mp4" /> </video>

<p>The fringing at the sides can be avoided by moving 50% of the points in the reverse direction.</p>

<video loop="" autoplay="" muted=""> <source src="https://avinayak.github.io/uploads/simplescreenrecorder-2021-01-10_05-28-03.mp4" type="video/mp4" /> </video>

<video loop="" autoplay="" muted=""> <source src="https://avinayak.github.io/uploads/simplescreenrecorder-2021-01-10_08-43-25.mp4" type="video/mp4" /> </video>

<p>More color variations</p>

<p><img src="/uploads/untitled.png" alt="" /></p>

<p>And that‚Äôs it. Hope this was educational!</p>
:ET